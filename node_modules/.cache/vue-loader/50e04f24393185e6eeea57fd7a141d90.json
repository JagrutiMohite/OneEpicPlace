{"remainingRequest":"/Users/jagrutimohite/Documents/web page internship/OneEpicPlace-WebsiteSchedulingExtension/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jagrutimohite/Documents/web page internship/OneEpicPlace-WebsiteSchedulingExtension/src/views/3. user views/components/calendars/MonthlyViewCalendar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jagrutimohite/Documents/web page internship/OneEpicPlace-WebsiteSchedulingExtension/src/views/3. user views/components/calendars/MonthlyViewCalendar.vue","mtime":1562358994137},{"path":"/Users/jagrutimohite/Documents/web page internship/OneEpicPlace-WebsiteSchedulingExtension/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jagrutimohite/Documents/web page internship/OneEpicPlace-WebsiteSchedulingExtension/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jagrutimohite/Documents/web page internship/OneEpicPlace-WebsiteSchedulingExtension/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jagrutimohite/Documents/web page internship/OneEpicPlace-WebsiteSchedulingExtension/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport * as api from '@/services/api_access';\n\nexport default {\n    data() {\n        return {\n            //days for the calendar\n            firstDay: null,\n            days: [],\n\n            //locations include: id, name, type\n            locations: this.$parent.locations,\n\n            //List of returned bookings\n            bookings: [],\n            //Interval to check the server for bookings\n            checkBookingsTimeout: null,\n            bookingDelays: 0,\n        }\n    },\n\n    methods: {\n        /* Date Functions */\n        getMonth(day) {\n            //Get first day of the month for date selector\n            this.firstDay = new Date(day.setDate(1));\n\n            //Reset days\n            this.days = [];\n            \n            //Get days before, during, and after the month\n            var startOfTheMonth = new Date(day.setDate(1));\n            var startOfTheMonth_day = startOfTheMonth.getDay();\n            var startOfDays = new Date(day.setDate(startOfTheMonth.getDate() - startOfTheMonth_day));\n            for (var index = 0; index < 42; index++) {\n                var temp = new Date(day);\n                temp = new Date(temp.setDate(startOfDays.getDate() + index));\n                temp.setHours(0, 0, 0, 0);\n                this.days[this.days.length] = temp;\n            }\n            /*\n            for (var i = 0; i < this.days.length; i++) {\n                console.log(i + ' / ' + this.days[i]);\n            }\n            */\n        },\n        decMonth: function() {\n            this.getMonth(new Date(this.days[0].setDate(this.days[0].getDate() - 1)));\n            this.checkBookings();\n        },\n        incMonth: function() {\n            this.getMonth(new Date(this.days[this.days.length-1].setDate(this.days[this.days.length-1].getDate() + 1)));\n            this.checkBookings();\n        },\n\n        getDayOfTheWeek(index) {\n            switch(index) {\n                case 1: return 'Sunday';\n                case 2: return 'Monday';\n                case 3: return 'Tuesday';\n                case 4: return 'Wednesday';\n                case 5: return 'Thursday';\n                case 6: return 'Friday';\n                case 7: return 'Saturday';\n            }\n        },\n        getMonthName(day) {\n            switch(day.getMonth()) {\n                case 0: return 'January';\n                case 1: return 'February';\n                case 2: return 'March';\n                case 3: return 'April';\n                case 4: return 'May';\n                case 5: return 'June';\n                case 6: return 'July';\n                case 7: return 'August';\n                case 8: return 'September';\n                case 9: return 'October';\n                case 10: return 'November';\n                case 11: return 'December';\n            }\n        },\n\n        /* JavaScript Styling */\n        styleCurrentDay(week, day) {\n            var date = this.days[(7*(week-1) + day) - 1];\n            if (date.getDate() == new Date().getDate() && date.getMonth() == new Date().getMonth())\n                return 'background-color: Gainsboro;';\n            else    //Done to reset yestday on DOM lifecycle refresh\n                return 'background-color: white;';\n        },\n        sortBookingsFor(week, day) {\n            var date = this.days[(7*(week-1) + day) - 1];\n            var matchedBookings = [];\n            //sort though all bookings and return the first 3 that are within the right block and not a desk\n            for (var i = 0; i < this.bookings.length; i++) {\n                if (date.toJSON().slice(0, 10) == this.bookings[i].date.slice(0, 10))\n                    matchedBookings[matchedBookings.length] = this.bookings[i];\n            }\n            matchedBookings.sort(function(booking1, booking2) {\n                booking1 = booking1.startTime.split(':')[0] + booking1.startTime.split(':')[1];\n                booking2 = booking2.startTime.split(':')[0] + booking2.startTime.split(':')[1];\n                //console.log(booking1 + '  ' + booking2);\n                return booking1 - booking2;\n            });\n            if (matchedBookings.length > 3) \n                matchedBookings = [matchedBookings[0], matchedBookings[1], matchedBookings[2]];\n            return matchedBookings;\n        },\n        fillBookingStartTime(booking) {\n            if (booking.startTime.split(':')[0] < 12)\n                return parseInt(booking.startTime.split(':')[0]) + ':' + booking.startTime.split(':')[1] + ' am';\n            else if (booking.startTime.split(':')[0] == 12)\n                return booking.startTime + ' pm';\n            else\n                return booking.startTime.split(':')[0] - 12 + ':' + booking.startTime.split(':')[1] + ' pm';\n        },\n        styleIcon(booking) {\n            var volumeOn = require('../../../../assets/volumeOn-black.png');\n            var volumeOff = require('../../../../assets/volumeOff-black.png');\n            if (booking.noiseLevel > 0)\n                return 'background-image: url('+volumeOn+');';\n            else if (booking.noiseLevel < 0)\n                return 'background-image: url('+volumeOff+');';\n        },\n        styleBookingText(booking) {\n            if (booking.noiseLevel != 0)\n                return 'width: 56%;';\n        },\n        getBookingCount(week, day) {\n            var date = this.days[(7*(week-1) + day) - 1];\n            var count = 0;\n            for (var i = 0; i < this.bookings.length; i++) {\n                if (date.toJSON().slice(0, 10) == this.bookings[i].date.slice(0, 10))\n                    count++;\n            }\n            return count;\n        },\n        styleBookingCount(week, day) {\n            var date = this.days[(7*(week-1) + day) - 1];\n            var count = 0;\n            for (var i = 0; i < this.bookings.length; i++) {\n                if (date.toJSON().slice(0, 10) == this.bookings[i].date.slice(0, 10))\n                    count++;\n            }\n            if (count == 0)\n                return 'visibility: hidden;';\n        },\n        styleDate(week, day) {\n            var date = this.days[(7*(week-1) + day) - 1];\n            if (date.getMonth() != this.firstDay.getMonth())\n                return 'color: LightGray;';\n        },\n\n        /* Data Update */\n        checkBookingsLoop() {\n            var THIS = this;\n            this.checkBookingsTimeout = setTimeout(function() {\n                THIS.bookingsDelay = 5000;\n                var startDate = THIS.days[0].toJSON().slice(0, 10);\n                var endDate = THIS.days[THIS.days.length-1].toJSON().slice(0, 10);\n                var refDate = THIS.days[0];\n                api.getBookingsDate(startDate, endDate).then(bookingsResult => {\n                    if (refDate != THIS.days[0])\n                        return;\n                    THIS.bookings = bookingsResult;\n                    THIS.checkBookingsLoop();\n                });\n            }, this.bookingsDelay)\n        },\n        checkBookings() {\n            this.bookings = [];\n            clearTimeout(this.checkBookingsTimeout);\n            this.bookingsDelay = 0;\n            this.checkBookingsLoop();\n        },\n\n        /* User Actions */\n        handlePageScroll() {\n            //Top Row Sticky Movment\n            var originalTop = document.getElementById('calendar').getBoundingClientRect().top + window.scrollY;\n            if (window.scrollY >= originalTop)\n                document.getElementById('topRow').style.top = window.scrollY - originalTop + 'px';\n            else\n                document.getElementById('topRow').style.top = '0px';\n        },\n        handleInnerSectionScroll() {\n            //Make sure calender y cant be changed\n            document.getElementById('innerSection').scrollTop = 0;\n        },\n\n        addBookingClicked(week, day) {\n            this.$parent.closeModals();\n            this.$parent.$refs.BookingModal.openModal(this.days[(7*(week-1) + day) - 1], this.locations[0], '12:00', '12:00');\n        },\n\n        viewBookings(week, day) {\n            var date = this.days[(7*(week-1) + day) - 1];\n            var matchedBookings = [];\n            //sort though all bookings and open a modal with the bookings for the right day sorted by time\n            for (var i = 0; i < this.bookings.length; i++) {\n                if (date.toJSON().slice(0, 10) == this.bookings[i].date.slice(0, 10))\n                    matchedBookings[matchedBookings.length] = this.bookings[i];\n            }\n            matchedBookings.sort(function(booking1, booking2) {\n                booking1 = booking1.startTime.split(':')[0] + booking1.startTime.split(':')[1];\n                booking2 = booking2.startTime.split(':')[0] + booking2.startTime.split(':')[1];\n                //console.log(booking1 + '  ' + booking2);\n                return booking1 - booking2;\n            });\n            this.$parent.closeModals();\n            this.$parent.$refs.BookedDayModal.openModal(matchedBookings);\n        }\n    },\n    \n    beforeMount() {\n        //console.log('beforeMount');\n        this.getMonth(new Date());\n    },\n    mounted() {\n        //console.log('mounted');\n        //Start check booking loop\n        this.checkBookingsLoop();\n        //Start page scroll listener\n        window.addEventListener('scroll', this.handlePageScroll);\n    },\n    beforeDestroy() {\n        //console.log('beforeDestroy');\n        //End check booking loop\n        clearTimeout(this.checkBookingsTimeout);\n        //End page scroll listener\n        window.removeEventListener('scroll', this.handlePageScroll);\n    }\n}\n",{"version":3,"sources":["MonthlyViewCalendar.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAifile":"MonthlyViewCalendar.vue","sourceRoot":"src/views/3. user views/components/calendars","sourcesContent":["<template>\n    <div class=\"MonthlyViewCalendar\"> \n\n        <!-- Container for date selector -->\n        <div class=\"dateSelector\">\n            <button id=\"dateSelectorPreviousBtn\" class=\"btn backBtn\" type=\"button\" @click=\"decMonth()\"></button>\n            <input id=\"dateSelectorDate\" class=\"date\" :value=\"getMonthName(firstDay) + ' ' + firstDay.getFullYear()\" disabled>\n            <button id=\"dateSelectorCalendar\" class=\"btn calendarBtn\" type=\"button\"></button>\n            <button id=\"dateSelectorPreviousBtn\" class=\"btn forwardBtn\" type=\"button\" @click=\"incMonth()\"></button>\n        </div>\n\n        <!-- Calendar -->\n        <div class=\"calendar\" id='calendar'>\n\n            <!-- Inner Scrollable Section -->\n            <div class=\"innerSection\" id='innerSection' @scroll='handleInnerSectionScroll()'>\n\n                <!-- Days -->\n                <div class=\"topRow\" id='topRow'>\n                    <div class=\"dayContainer\" v-for=\"index in 7\" :key=\"'day'+index\">\n                        <div class=\"day\">\n                            <div class=\"dayOfTheWeek\">{{getDayOfTheWeek(index)}}</div>\n                        </div>\n                    </div>\n                </div>\n\n                <!-- Calendar Rows -->\n                <div class=\"firstRowPlaceHolder\"></div>\n                <div class=\"calendarRow\" v-for=\"week in 6\" :key=\"'week'+week\">\n                    <!-- Calendar Blocks -->\n                    <div class=\"block\" v-for=\"day in 7\" :key=\"'block'+week+':'+day\" :style='styleCurrentDay(week, day)'>\n                        <!-- Display -->\n                        <div class=\"date\" :style=\"styleDate(week, day)\">{{days[(7*(week-1) + day) - 1].getDate()}}</div>\n                        <div class=\"searchBar\">\n                            <div class=\"searchIcon\" :style='styleBookingCount(week, day)' @click='viewBookings(week, day)'></div>\n                            <div class=\"searchText\" :style='styleBookingCount(week, day)' @click='viewBookings(week, day)'>\n                                {{getBookingCount(week, day) + ' total'}}\n                            </div>\n                        </div>\n                        <button class=\"addBtn\" @click=\"addBookingClicked(week, day)\"></button>\n\n                        <!-- Bookings -->\n                        <div class=\"booking\" v-for=\"booking in sortBookingsFor(week, day)\" :key=\"'booking'+booking.id\" @click='viewBookings(week, day)'>\n                            <div class=\"timeBox\" :style='\"background-color:\"+booking.bookingColor'>\n                                <div class=\"time\">{{fillBookingStartTime(booking)}}</div>\n                            </div>\n                            <div v-if=\"booking.noiseLevel != 0\" class=\"icon\" :style='styleIcon(booking)'></div>\n                            <div class=\"textBox\" :style='styleBookingText(booking)'>\n                                <div class=\"text\">{{booking.title}}</div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n        \n</template>\n\n<style scoped lang=\"scss\">\n    //Personal CSS\n    @import \"./css/MonthlyViewCalendar.css\";\n</style>\n\n<script>\n    import * as api from '@/services/api_access';\n\n    export default {\n        data() {\n            return {\n                //days for the calendar\n                firstDay: null,\n                days: [],\n\n                //locations include: id, name, type\n                locations: this.$parent.locations,\n\n                //List of returned bookings\n                bookings: [],\n                //Interval to check the server for bookings\n                checkBookingsTimeout: null,\n                bookingDelays: 0,\n            }\n        },\n\n        methods: {\n            /* Date Functions */\n            getMonth(day) {\n                //Get first day of the month for date selector\n                this.firstDay = new Date(day.setDate(1));\n\n                //Reset days\n                this.days = [];\n                \n                //Get days before, during, and after the month\n                var startOfTheMonth = new Date(day.setDate(1));\n                var startOfTheMonth_day = startOfTheMonth.getDay();\n                var startOfDays = new Date(day.setDate(startOfTheMonth.getDate() - startOfTheMonth_day));\n                for (var index = 0; index < 42; index++) {\n                    var temp = new Date(day);\n                    temp = new Date(temp.setDate(startOfDays.getDate() + index));\n                    temp.setHours(0, 0, 0, 0);\n                    this.days[this.days.length] = temp;\n                }\n                /*\n                for (var i = 0; i < this.days.length; i++) {\n                    console.log(i + ' / ' + this.days[i]);\n                }\n                */\n            },\n            decMonth: function() {\n                this.getMonth(new Date(this.days[0].setDate(this.days[0].getDate() - 1)));\n                this.checkBookings();\n            },\n            incMonth: function() {\n                this.getMonth(new Date(this.days[this.days.length-1].setDate(this.days[this.days.length-1].getDate() + 1)));\n                this.checkBookings();\n            },\n\n            getDayOfTheWeek(index) {\n                switch(index) {\n                    case 1: return 'Sunday';\n                    case 2: return 'Monday';\n                    case 3: return 'Tuesday';\n                    case 4: return 'Wednesday';\n                    case 5: return 'Thursday';\n                    case 6: return 'Friday';\n                    case 7: return 'Saturday';\n                }\n            },\n            getMonthName(day) {\n                switch(day.getMonth()) {\n                    case 0: return 'January';\n                    case 1: return 'February';\n                    case 2: return 'March';\n                    case 3: return 'April';\n                    case 4: return 'May';\n                    case 5: return 'June';\n                    case 6: return 'July';\n                    case 7: return 'August';\n                    case 8: return 'September';\n                    case 9: return 'October';\n                    case 10: return 'November';\n                    case 11: return 'December';\n                }\n            },\n\n            /* JavaScript Styling */\n            styleCurrentDay(week, day) {\n                var date = this.days[(7*(week-1) + day) - 1];\n                if (date.getDate() == new Date().getDate() && date.getMonth() == new Date().getMonth())\n                    return 'background-color: Gainsboro;';\n                else    //Done to reset yestday on DOM lifecycle refresh\n                    return 'background-color: white;';\n            },\n            sortBookingsFor(week, day) {\n                var date = this.days[(7*(week-1) + day) - 1];\n                var matchedBookings = [];\n                //sort though all bookings and return the first 3 that are within the right block and not a desk\n                for (var i = 0; i < this.bookings.length; i++) {\n                    if (date.toJSON().slice(0, 10) == this.bookings[i].date.slice(0, 10))\n                        matchedBookings[matchedBookings.length] = this.bookings[i];\n                }\n                matchedBookings.sort(function(booking1, booking2) {\n                    booking1 = booking1.startTime.split(':')[0] + booking1.startTime.split(':')[1];\n                    booking2 = booking2.startTime.split(':')[0] + booking2.startTime.split(':')[1];\n                    //console.log(booking1 + '  ' + booking2);\n                    return booking1 - booking2;\n                });\n                if (matchedBookings.length > 3) \n                    matchedBookings = [matchedBookings[0], matchedBookings[1], matchedBookings[2]];\n                return matchedBookings;\n            },\n            fillBookingStartTime(booking) {\n                if (booking.startTime.split(':')[0] < 12)\n                    return parseInt(booking.startTime.split(':')[0]) + ':' + booking.startTime.split(':')[1] + ' am';\n                else if (booking.startTime.split(':')[0] == 12)\n                    return booking.startTime + ' pm';\n                else\n                    return booking.startTime.split(':')[0] - 12 + ':' + booking.startTime.split(':')[1] + ' pm';\n            },\n            styleIcon(booking) {\n                var volumeOn = require('../../../../assets/volumeOn-black.png');\n                var volumeOff = require('../../../../assets/volumeOff-black.png');\n                if (booking.noiseLevel > 0)\n                    return 'background-image: url('+volumeOn+');';\n                else if (booking.noiseLevel < 0)\n                    return 'background-image: url('+volumeOff+');';\n            },\n            styleBookingText(booking) {\n                if (booking.noiseLevel != 0)\n                    return 'width: 56%;';\n            },\n            getBookingCount(week, day) {\n                var date = this.days[(7*(week-1) + day) - 1];\n                var count = 0;\n                for (var i = 0; i < this.bookings.length; i++) {\n                    if (date.toJSON().slice(0, 10) == this.bookings[i].date.slice(0, 10))\n                        count++;\n                }\n                return count;\n            },\n            styleBookingCount(week, day) {\n                var date = this.days[(7*(week-1) + day) - 1];\n                var count = 0;\n                for (var i = 0; i < this.bookings.length; i++) {\n                    if (date.toJSON().slice(0, 10) == this.bookings[i].date.slice(0, 10))\n                        count++;\n                }\n                if (count == 0)\n                    return 'visibility: hidden;';\n            },\n            styleDate(week, day) {\n                var date = this.days[(7*(week-1) + day) - 1];\n                if (date.getMonth() != this.firstDay.getMonth())\n                    return 'color: LightGray;';\n            },\n\n            /* Data Update */\n            checkBookingsLoop() {\n                var THIS = this;\n                this.checkBookingsTimeout = setTimeout(function() {\n                    THIS.bookingsDelay = 5000;\n                    var startDate = THIS.days[0].toJSON().slice(0, 10);\n                    var endDate = THIS.days[THIS.days.length-1].toJSON().slice(0, 10);\n                    var refDate = THIS.days[0];\n                    api.getBookingsDate(startDate, endDate).then(bookingsResult => {\n                        if (refDate != THIS.days[0])\n                            return;\n                        THIS.bookings = bookingsResult;\n                        THIS.checkBookingsLoop();\n                    });\n                }, this.bookingsDelay)\n            },\n            checkBookings() {\n                this.bookings = [];\n                clearTimeout(this.checkBookingsTimeout);\n                this.bookingsDelay = 0;\n                this.checkBookingsLoop();\n            },\n\n            /* User Actions */\n            handlePageScroll() {\n                //Top Row Sticky Movment\n                var originalTop = document.getElementById('calendar').getBoundingClientRect().top + window.scrollY;\n                if (window.scrollY >= originalTop)\n                    document.getElementById('topRow').style.top = window.scrollY - originalTop + 'px';\n                else\n                    document.getElementById('topRow').style.top = '0px';\n            },\n            handleInnerSectionScroll() {\n                //Make sure calender y cant be changed\n                document.getElementById('innerSection').scrollTop = 0;\n            },\n\n            addBookingClicked(week, day) {\n                this.$parent.closeModals();\n                this.$parent.$refs.BookingModal.openModal(this.days[(7*(week-1) + day) - 1], this.locations[0], '12:00', '12:00');\n            },\n\n            viewBookings(week, day) {\n                var date = this.days[(7*(week-1) + day) - 1];\n                var matchedBookings = [];\n                //sort though all bookings and open a modal with the bookings for the right day sorted by time\n                for (var i = 0; i < this.bookings.length; i++) {\n                    if (date.toJSON().slice(0, 10) == this.bookings[i].date.slice(0, 10))\n                        matchedBookings[matchedBookings.length] = this.bookings[i];\n                }\n                matchedBookings.sort(function(booking1, booking2) {\n                    booking1 = booking1.startTime.split(':')[0] + booking1.startTime.split(':')[1];\n                    booking2 = booking2.startTime.split(':')[0] + booking2.startTime.split(':')[1];\n                    //console.log(booking1 + '  ' + booking2);\n                    return booking1 - booking2;\n                });\n                this.$parent.closeModals();\n                this.$parent.$refs.BookedDayModal.openModal(matchedBookings);\n            }\n        },\n        \n        beforeMount() {\n            //console.log('beforeMount');\n            this.getMonth(new Date());\n        },\n        mounted() {\n            //console.log('mounted');\n            //Start check booking loop\n            this.checkBookingsLoop();\n            //Start page scroll listener\n            window.addEventListener('scroll', this.handlePageScroll);\n        },\n        beforeDestroy() {\n            //console.log('beforeDestroy');\n            //End check booking loop\n            clearTimeout(this.checkBookingsTimeout);\n            //End page scroll listener\n            window.removeEventListener('scroll', this.handlePageScroll);\n        }\n    }\n</script>\n    "]}]}